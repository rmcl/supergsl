# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import sgsl_pb2 as sgsl__pb2


class CompilerFunctionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFunctionArguments = channel.unary_unary(
                '/supergsl.CompilerFunction/GetFunctionArguments',
                request_serializer=sgsl__pb2.FunctionCallIdentifier.SerializeToString,
                response_deserializer=sgsl__pb2.MessageFunctionArguments.FromString,
                )
        self.SetFunctionReturnValue = channel.unary_unary(
                '/supergsl.CompilerFunction/SetFunctionReturnValue',
                request_serializer=sgsl__pb2.FunctionReturnValue.SerializeToString,
                response_deserializer=sgsl__pb2.SetFunctionReturnValueResponse.FromString,
                )


class CompilerFunctionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFunctionArguments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFunctionReturnValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompilerFunctionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFunctionArguments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFunctionArguments,
                    request_deserializer=sgsl__pb2.FunctionCallIdentifier.FromString,
                    response_serializer=sgsl__pb2.MessageFunctionArguments.SerializeToString,
            ),
            'SetFunctionReturnValue': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFunctionReturnValue,
                    request_deserializer=sgsl__pb2.FunctionReturnValue.FromString,
                    response_serializer=sgsl__pb2.SetFunctionReturnValueResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'supergsl.CompilerFunction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CompilerFunction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFunctionArguments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supergsl.CompilerFunction/GetFunctionArguments',
            sgsl__pb2.FunctionCallIdentifier.SerializeToString,
            sgsl__pb2.MessageFunctionArguments.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetFunctionReturnValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supergsl.CompilerFunction/SetFunctionReturnValue',
            sgsl__pb2.FunctionReturnValue.SerializeToString,
            sgsl__pb2.SetFunctionReturnValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
