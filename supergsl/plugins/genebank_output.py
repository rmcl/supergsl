from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import IUPAC
from Bio.SeqFeature import SeqFeature, FeatureLocation

from supergsl.core.output import OutputProvider


class GeneBankOutputPass(OutputProvider):
    """Generate GeneBank file containing an annotated assembly.
    """

    name = 'genebank'

    def get_node_handlers(self):
        return {
            'Assembly': self.visit_assembly_node,
        }

    def before_pass(self, ast):
        """Initialize the SBOL Document."""
        self.records = []

        return ast

    def after_pass(self, ast):
        # Save as GenBank file
        output_file = open('example.gb', 'w')
        SeqIO.write(self.records, output_file, 'genbank')
        return ast

    def visit_assembly_node(self, node):
        features = []
        assembly_sequence = ''
        part_start_pos = 0

        for part in node.parts:
            assembly_sequence += str(part.source_part.sequence.seq)

            new_start_pos = len(assembly_sequence)

            # Add annotation
            feature = SeqFeature(
                id=part.identifier,
                qualifiers={
                    'name': part.identifier
                },
                location=FeatureLocation(
                    start=part_start_pos,
                    end=new_start_pos
                ),
                type='part')

            features.append(feature)
            part_start_pos = new_start_pos

        sequence_object = Seq(assembly_sequence, IUPAC.unambiguous_dna)

        record = SeqRecord(sequence_object,
           id='123456789', # random accession number
           name='Example',
           description='An example GenBank file generated by superGSL')

        for feature in features:
            record.features.append(feature)

        self.records.append(record)
