from typing import List, Tuple, Type
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.SeqFeature import SeqFeature, FeatureLocation
from supergsl.core.plugin import SuperGSLPlugin
from supergsl.core.function import SuperGSLFunction, SuperGSLFunctionDeclaration
from supergsl.types.assembly import AssemblyResultSet, Assembly


class GenBankOutput(SuperGSLFunction):
    """Generate GenBank file containing an annotated assembly."""

    return_type = None

    @classmethod
    def get_arguments(cls) -> List[Tuple[str, Type]]:
        return [
            ('filename', str),
            ('assemblies', list)
        ]

    def execute(self, params : dict):
        records : List[SeqRecord] = []

        assembly_list : AssemblyResultSet = params[0]
        for assembly_idx, assembly in enumerate(assembly_list):
            features = []
            part_start_pos = 0

            assembly_sequence = assembly.get_sequence()

            for part in assembly.get_parts():
                #assembly_sequence += str(part.source_part.sequence.seq)

                # Add annotation
                feature = SeqFeature(
                    id=part.identifier,
                    qualifiers={
                        'name': part.identifier
                    },
                    #location=FeatureLocation(
                    #    start=part_start_pos,
                    #    end=new_start_pos
                    #),
                    type='part')

                features.append(feature)

            record = SeqRecord(assembly_sequence.seq,
               id='123456789', # random accession number
               name='Example',
               description='An example GenBank file generated by SuperGSL')

            for feature in features:
                record.features.append(feature)

            records.append(record)

        output_file = open('example.gb', 'w')
        SeqIO.write(records, output_file, 'genbank')
